{"version":3,"sources":["constants/index.ts","api/index.ts","util/index.ts","helper/OrderBookStore.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["actionType","responseDataType","getInstruments","a","url","fetch","response","pairs","json","filteredInstruments","filter","pair","quote_currency","sort","b","base_currency","updateIndex","sortedArray","order","index","memoryLimit","price","amount","length","splice","getSortedIndex","array","inverse","low","high","mid","cleanOrderbookBid","i","cleanOrderbookAsk","processOrderbookUpdate","data","asks","bids","Number","OrderBookStore","_data","this","Map","Array","from","keys","symbol","has","hasOrderBook","delete","get","set","App","props","OrderBooks","useState","instruments","setInstruments","setPair","orderBookData","setOrderBookData","webSocketRefInstance","useRef","first","useEffect","current","WebSocket","instrumentFromApi","console","log","fetchInstruments","close","messagePayload","type","product_ids","channels","jsonMsg","JSON","stringify","send","onmessage","onMessageRecieved","e","parse","snapshot","updateOrderBook","getOrderBook","prevaskChanged","prebidChanged","l2update","product_id","changes","getChangedOrders","askChanged","bidChanged","payload","parsedAmount","change","action","buy","push","sell","className","name","value","onChange","unSubscribeMessage","removeSymbolFromOrderBook","target","map","instrument","idx","id","display_name","bid","ask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92bbdf23.chunk.js","sourcesContent":["export const COIN_PRO_URL = 'https://api.pro.coinbase.com';\r\nexport const COIN_PRO_WS_URL = 'wss://ws-feed.pro.coinbase.com'\r\nexport enum actionType {\r\n    buy = 'buy',\r\n    sell = 'sell'\r\n}\r\nexport enum responseDataType {\r\n    snapshot = 'snapshot',\r\n    l2update = \"l2update\"\r\n}","import { COIN_PRO_URL } from \"../constants\"\r\nimport { Iinstrument } from \"../interface/Iinstrument\";\r\n\r\n//TODO: remove any\r\nexport const getInstruments = async (): Promise<Iinstrument[]> => {\r\n    const url = `${COIN_PRO_URL}/products`;\r\n    let response = await fetch(url);\r\n    let pairs: Iinstrument[] = [];\r\n    pairs = await response.json();\r\n    let filteredInstruments: Iinstrument[] = pairs.filter((pair: any) => pair.quote_currency === 'USD');\r\n    filteredInstruments = filteredInstruments.sort((a: any, b: any) => {\r\n        if (a.base_currency < b.base_currency) {\r\n            return -1;\r\n        }\r\n        if (a.base_currency > b.base_currency) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    });\r\n    return filteredInstruments;\r\n}","import { IOrderBookData, Order } from './../interface/IOrderBookData';\r\nconst updateIndex = (sortedArray: Order[], order: Order, index: number, memoryLimit = 0): void => {\r\n    const price = order[0];\r\n    const amount = order[1];\r\n\r\n    if (index < sortedArray.length && sortedArray[index][0] === price) {\r\n        if (amount === 0) {\r\n            sortedArray.splice(index, 1);\r\n        } else {\r\n            sortedArray.splice(index, 1, order);\r\n        }\r\n    } else if (amount !== 0) {\r\n        sortedArray.splice(index, 0, order);\r\n    }\r\n\r\n    if (memoryLimit !== 0 && sortedArray.length > memoryLimit) {\r\n        sortedArray.splice(memoryLimit, sortedArray.length - memoryLimit);\r\n    }\r\n};\r\nconst getSortedIndex = (array: Order[], price: number, inverse = false): number => {\r\n    let low = 0;\r\n    let high = array ? array.length : low;\r\n\r\n    while (low < high) {\r\n        const mid = (low + high) >>> 1;\r\n\r\n        if ((!inverse && +array[mid][0] < +price) || (inverse && +array[mid][0] > +price)) {\r\n            low = mid + 1;\r\n        } else {\r\n            high = mid;\r\n        }\r\n    }\r\n    return low;\r\n};\r\nconst cleanOrderbookBid = (array: Order[], price: number): void => {\r\n    for (let i = 0; i < array.length; i++) {\r\n        if (price < array[i][0]) {\r\n            array.splice(i, 1);\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n};\r\n\r\nconst cleanOrderbookAsk = (array: Order[], price: number): void => {\r\n    for (let i = 0; i < array.length; i++) {\r\n        if (price > array[i][0]) {\r\n            array.splice(i, 1);\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n};\r\nexport const processOrderbookUpdate = (\r\n    data: IOrderBookData,\r\n    asks: Order[],\r\n    bids: Order[],\r\n    memoryLimit: number,\r\n): IOrderBookData => {\r\n    for (const order of asks) {\r\n        const price = Number(order[0]);\r\n        const amount = Number(order[1]);\r\n\r\n        updateIndex(data.asks, [price, amount], getSortedIndex(data.asks, price, false), memoryLimit);\r\n\r\n        if (amount !== 0 && data.bids[0] && price < data.bids[0][0]) {\r\n            cleanOrderbookBid(data.bids, price);\r\n        }\r\n    }\r\n\r\n    for (const order of bids) {\r\n        const price = Number(order[0]);\r\n        const amount = Number(order[1]);\r\n\r\n        updateIndex(data.bids, [price, amount], getSortedIndex(data.bids, price, true), memoryLimit);\r\n\r\n        if (amount !== 0 && data.asks[0] && price > data.asks[0][0]) {\r\n            cleanOrderbookAsk(data.asks, price);\r\n        }\r\n    }\r\n\r\n    return data;\r\n};","import { IOrderBookData, Order } from \"../interface/IOrderBookData\";\r\nimport { processOrderbookUpdate } from \"../util\";\r\n\r\nexport class OrderBookStore {\r\n    _data: Map<string, IOrderBookData | undefined>;\r\n    private memoryLimit: number;\r\n\r\n    constructor(memoryLimit = 0) {\r\n        this._data = new Map();\r\n        this.memoryLimit = memoryLimit;\r\n    }\r\n\r\n    public getSymbolList(): string[] {\r\n        return Array.from(this._data.keys());\r\n    }\r\n\r\n    public hasOrderBook(symbol: string): boolean {\r\n        return this._data.has(symbol);\r\n    }\r\n    public removeSymbolFromOrderBook(symbol: string) {\r\n        if (this.hasOrderBook(symbol)) {\r\n            this._data.delete(symbol);\r\n        }\r\n    }\r\n\r\n    public getOrderBook(symbol: string): IOrderBookData | undefined {\r\n        return this._data.get(symbol);\r\n    }\r\n\r\n    public updateOrderBook(symbol: string, asks: Order[], bids: Order[]): void {\r\n        const { memoryLimit } = this;\r\n        const data = this._data.get(symbol);\r\n\r\n        if (data) {\r\n            this._data.set(symbol, processOrderbookUpdate({ ...data }, asks, bids, memoryLimit));\r\n            return;\r\n        }\r\n\r\n        this._data.set(symbol, processOrderbookUpdate({ asks: [], bids: [] }, asks, bids, memoryLimit));\r\n    }\r\n}","import React, { FC, useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport { IApp } from './interface/IApp';\nimport { actionType, COIN_PRO_WS_URL, responseDataType } from './constants';\nimport { getInstruments } from './api';\nimport { Iinstrument } from './interface/Iinstrument';\nimport { IMessageRequestPayload } from './interface/IMessageRequestPayload';\nimport { OrderBookStore } from './helper/OrderBookStore';\nimport { ChangedOrder, IOrderBookData, Order } from './interface/IOrderBookData';\n\nconst App: FC<IApp> = (props) => {\n  const OrderBooks = new OrderBookStore(10);\n  const [instruments, setInstruments] = useState<Iinstrument[]>([]);\n  const [pair, setPair] = useState<string>('');\n  const [orderBookData, setOrderBookData] = useState<IOrderBookData | undefined>();\n  let webSocketRefInstance = useRef<any>(null);\n  let first = useRef(false);\n  useEffect(() => {\n    webSocketRefInstance.current = new WebSocket(COIN_PRO_WS_URL);\n\n    const fetchInstruments = async () => {\n      const instrumentFromApi = await getInstruments();\n      console.log(instrumentFromApi);\n      setInstruments(instrumentFromApi);\n      first.current = true;\n    }\n    fetchInstruments();\n    return () => {\n      webSocketRefInstance.current.close()\n    }\n  }, []);\n  useEffect(() => {\n    if (!first.current) {\n      return;\n    }\n    let messagePayload: IMessageRequestPayload = {\n      type: \"subscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\", \"level2\"]\n    }\n    let jsonMsg = JSON.stringify(messagePayload);\n    webSocketRefInstance.current.send(jsonMsg);\n    webSocketRefInstance.current.onmessage = onMessageRecieved;\n\n\n  }, [pair])\n\n  const onMessageRecieved = (e: MessageEvent) => {\n    let data = JSON.parse(e.data);\n    if (data.type === responseDataType.snapshot) {\n      OrderBooks.updateOrderBook(pair, data.asks, data.bids);\n      setOrderBookData(OrderBooks.getOrderBook(pair));\n      return;\n    }\n    let prevaskChanged: Order[] = orderBookData?.asks ? [...orderBookData?.asks] : [];\n    let prebidChanged: Order[] = orderBookData?.bids ? [...orderBookData?.bids] : [];\n    if (data.type === responseDataType.l2update && data.product_id === pair) {\n      let changes: ChangedOrder[] = data.changes;\n      let [askChanged, bidChanged] = getChangedOrders({ changes, asks: prevaskChanged, bids: prebidChanged })\n      OrderBooks.updateOrderBook(pair, askChanged, bidChanged);\n      setOrderBookData(OrderBooks.getOrderBook(pair));\n    }\n  }\n  const getChangedOrders = (payload: { changes: ChangedOrder[], asks: Order[], bids: Order[] }): [Order[], Order[]] => {\n    const { changes, asks, bids } = payload;\n    let parsedAmount = 0;\n    for (let i = 0; i < changes.length; i++) {\n      parsedAmount = 0;\n      let change = changes[i];\n      const [action, price, amount] = change;\n      if (action === actionType.buy) {\n        parsedAmount = +amount;\n        bids.push([price, parsedAmount]);\n      }\n      if (action === actionType.sell) {\n        parsedAmount = +amount;\n        asks.push([price, parsedAmount])\n      }\n    }\n    return [asks, bids];\n  }\n  const handleOnChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    let unSubscribeMessage: IMessageRequestPayload = {\n      type: \"unsubscribe\",\n      product_ids: [pair],\n      channels: [\"level2\"]\n    }\n    webSocketRefInstance.current.send(JSON.stringify(unSubscribeMessage));\n    OrderBooks.removeSymbolFromOrderBook(pair);\n    setOrderBookData(OrderBooks.getOrderBook(pair));\n    setPair(e.target.value);\n  }\n\n  return (\n    <div className=\"container\">\n\n      <select name=\"instruments\" value={pair} onChange={handleOnChange}>\n        {\n          instruments && instruments.map((instrument, idx) => {\n            return (<option key={idx} value={instrument.id}>\n              {instrument.display_name}\n            </option>);\n          })\n        }\n      </select>\n      <div>\n        Bid\n        <ul>\n          {orderBookData && orderBookData?.bids.map((bid, i) => {\n            return <li>{`${bid[0]} -> ${bid[1]}`} </li>\n          })\n          }\n        </ul>\n\n      </div>\n      <div>\n        Asks\n        <ul>\n          {orderBookData && orderBookData?.asks.map((ask, i) => {\n            return <li>{`${ask[0]} -> ${ask[1]}`} </li>\n          })\n          }\n        </ul>\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}